# pyproject.toml - Configuration complète du projet

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "async-resilient-http-client"
version = "1.0.0"
description = "Client HTTP asynchrone résilient avec stratégie de retry et gestion d'événements"
authors = [
    {name = "Votre Nom", email = "votre.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["http", "async", "client", "retry", "resilient", "httpx"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "httpx>=0.24.0",
    "httpcore>=0.16.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
http2 = [
    "httpx[http2]>=0.24.0",
]
all = [
    "async-resilient-http-client[test,dev,http2]",
]

[project.urls]
"Homepage" = "https://github.com/votre-username/async-resilient-http-client"
"Bug Reports" = "https://github.com/votre-username/async-resilient-http-client/issues"
"Source" = "https://github.com/votre-username/async-resilient-http-client"

# Configuration pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=typed_async_client",
    "--cov=async_client_constants",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
testpaths = [
    "tests",
    "comprehensive_tests.py",
]
markers = [
    "integration: tests d'intégration nécessitant une connexion réseau",
    "slow: tests lents (>5 secondes)",
    "unit: tests unitaires rapides",
    "asyncio: tests utilisant asyncio",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Configuration de couverture de code
[tool.coverage.run]
source = ["typed_async_client", "async_client_constants"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Configuration Black (formatage)
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuration isort (imports)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
force_sort_within_sections = true
combine_as_imports = true
include_trailing_comma = true
known_first_party = ["typed_async_client", "async_client_constants"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Configuration mypy (vérification de types)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Configuration ruff (linter rapide)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018", "F401", "F811"]